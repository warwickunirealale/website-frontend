{"version":3,"file":"Block.mjs","sources":["../src/Block.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useComponentsContext, type Node, type GetPropsFromNode } from './BlocksRenderer';\nimport { Text } from './Text';\n\ntype BlockComponentProps = GetPropsFromNode<Node>;\n\ninterface BlockProps {\n  content: Node;\n}\n\nconst voidTypes = ['image'];\n\n/**\n * Add props that are specific to a block type, and not present in that node type\n */\nconst augmentProps = (content: Node) => {\n  const { children: childrenNodes, type, ...props } = content;\n\n  if (type === 'code') {\n    // Builds a plain text string from an array of nodes, regardless of links or modifiers\n    const getPlainText = (children: typeof childrenNodes): string => {\n      return children.reduce((currentPlainText, node) => {\n        if (node.type === 'text') {\n          return currentPlainText.concat(node.text);\n        }\n\n        if (node.type === 'link') {\n          return currentPlainText.concat(getPlainText(node.children));\n        }\n\n        return currentPlainText;\n      }, '');\n    };\n\n    return {\n      ...props,\n      plainText: getPlainText(content.children),\n    };\n  }\n\n  return props;\n};\n\nconst Block = ({ content }: BlockProps) => {\n  const { children: childrenNodes, type, ...props } = content;\n\n  // Get matching React component from the context\n  const { blocks, missingBlockTypes } = useComponentsContext();\n  const BlockComponent = blocks[type] as React.ComponentType<BlockComponentProps> | undefined;\n\n  if (!BlockComponent) {\n    // Only warn once per missing block\n    if (!missingBlockTypes.includes(type)) {\n      console.warn(`[@strapi/block-react-renderer] No component found for block type \"${type}\"`);\n      missingBlockTypes.push(type);\n    }\n\n    // Don't throw an error, just ignore the block\n    return null;\n  }\n\n  // Handle void types separately as they should not render children\n  if (voidTypes.includes(type)) {\n    return <BlockComponent {...props} />;\n  }\n\n  // Handle empty paragraphs separately as they should render a <br> tag\n  if (\n    type === 'paragraph' &&\n    childrenNodes.length === 1 &&\n    childrenNodes[0].type === 'text' &&\n    childrenNodes[0].text === ''\n  ) {\n    return <br />;\n  }\n\n  const augmentedProps = augmentProps(content);\n\n  return (\n    <BlockComponent {...augmentedProps}>\n      {childrenNodes.map((childNode, index) => {\n        if (childNode.type === 'text') {\n          const { type: _type, ...childNodeProps } = childNode;\n\n          // TODO use node as key with WeakMap\n          return <Text {...childNodeProps} key={index} />;\n        }\n\n        // TODO use node as key with WeakMap\n        return <Block content={childNode} key={index} />;\n      })}\n    </BlockComponent>\n  );\n};\n\nexport { Block };\n"],"names":[],"mappings":";;;;AAWA,MAAM,YAAY,CAAC,OAAO;AAK1B,MAAM,eAAe,CAAC,YAAkB;AACtC,QAAM,EAAE,UAAU,eAAe,MAAM,GAAG,MAAU,IAAA;AAEpD,MAAI,SAAS,QAAQ;AAEb,UAAA,eAAe,CAAC,aAA2C;AAC/D,aAAO,SAAS,OAAO,CAAC,kBAAkB,SAAS;AAC7C,YAAA,KAAK,SAAS,QAAQ;AACjB,iBAAA,iBAAiB,OAAO,KAAK,IAAI;AAAA,QAC1C;AAEI,YAAA,KAAK,SAAS,QAAQ;AACxB,iBAAO,iBAAiB,OAAO,aAAa,KAAK,QAAQ,CAAC;AAAA,QAC5D;AAEO,eAAA;AAAA,SACN,EAAE;AAAA,IAAA;AAGA,WAAA;AAAA,MACL,GAAG;AAAA,MACH,WAAW,aAAa,QAAQ,QAAQ;AAAA,IAAA;AAAA,EAE5C;AAEO,SAAA;AACT;AAEA,MAAM,QAAQ,CAAC,EAAE,cAA0B;AACzC,QAAM,EAAE,UAAU,eAAe,MAAM,GAAG,MAAU,IAAA;AAGpD,QAAM,EAAE,QAAQ,kBAAkB,IAAI,qBAAqB;AACrD,QAAA,iBAAiB,OAAO,IAAI;AAElC,MAAI,CAAC,gBAAgB;AAEnB,QAAI,CAAC,kBAAkB,SAAS,IAAI,GAAG;AAC7B,cAAA,KAAK,qEAAqE,IAAI,GAAG;AACzF,wBAAkB,KAAK,IAAI;AAAA,IAC7B;AAGO,WAAA;AAAA,EACT;AAGI,MAAA,UAAU,SAAS,IAAI,GAAG;AACrB,WAAA,oBAAC,gBAAgB,EAAA,GAAG,MAAO,CAAA;AAAA,EACpC;AAGA,MACE,SAAS,eACT,cAAc,WAAW,KACzB,cAAc,CAAC,EAAE,SAAS,UAC1B,cAAc,CAAC,EAAE,SAAS,IAC1B;AACA,+BAAQ,MAAG,CAAA,CAAA;AAAA,EACb;AAEM,QAAA,iBAAiB,aAAa,OAAO;AAGzC,SAAA,oBAAC,kBAAgB,GAAG,gBACjB,wBAAc,IAAI,CAAC,WAAW,UAAU;AACnC,QAAA,UAAU,SAAS,QAAQ;AAC7B,YAAM,EAAE,MAAM,OAAO,GAAG,mBAAmB;AAG3C,aAAQ,8BAAA,MAAA,EAAM,GAAG,gBAAgB,KAAK,MAAO,CAAA;AAAA,IAC/C;AAGA,WAAQ,oBAAA,OAAA,EAAM,SAAS,UAAA,GAAgB,KAAO;AAAA,EAC/C,CAAA,EACH,CAAA;AAEJ;"}